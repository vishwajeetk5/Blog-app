<%- include('partials/header.ejs') %>
<main class="container m-auto mt-4">
        <h2 class="p-3" id="quote">
        "Blogging is not just about expressing ideas; it's a platform to connect, learn, and grow togetherâ€”start your
        journey now!"
        </h2>
       

          <div class="form-group mx-sm-3 mb-2">
            <input type="text" class="form-control" id="searchInput" placeholder="Enter keyword to search">
          </div>
   
        <ul id="searchResults" class="list-group mt-3"></ul>
      


        <!-- Here is the EJS logic -->
    <div class="container d-flex justify-content-center align-items-center flex-column">
        <a id="newPostBtn" href="/new">       
   <button type="button" class=" pl-5 ml-5"><i class="fa-solid fa-plus"></i> New Post
    </button></a>
        <ul id="postsList">
          <% posts.sort((a, b) => new Date(b.date) - new Date(a.date)).forEach(post => { %>
            <li class="posts p-3 m-3" id=<%=post._id%>>
              <h2>
                <%=post.title%>
              </h2>
              <small class="text-black-50">
                <%=post.date%>
              </small>
              <p>
                <%=post.content%>
              </p>
              <small>By: <%=post.author%> </small>
              <br>
              <small>post._id <%= post._id %></small>
              <a class="edit" href="/edit/<%= post._id %>"><button class="bg-info py-2"><i class="fa-regular fa-pen-to-square"></i> Edit</button></a>
              <a class="delete" href="/api/posts/<%= post._id %>"><button class="bg-danger py-2"><i class="fa-solid fa-trash-can"></i> Delete</button></a>
            </li>
            <% }); %>
        </ul>
      </div>
    
</main>
<%- include('partials/bgAnime.ejs') %>
<div class="spacer"></div>
<%- include('partials/footer.ejs') %>
<script>
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('searchInput');
    const searchResults = document.getElementById('searchResults');
    const postsList = document.getElementById('postsList');

    const fetchSearchResults = async (keyword) => {
      try {
        const response = await fetch(`http://localhost:4000/search/${keyword}`);

        if (response.ok) {
          const data = await response.json();
          searchResults.innerHTML = ''; // Clear previous search results
          if (data.searchResult > 0) {
            data.foundin.forEach(result => {
              const li = document.createElement('li');
              li.classList.add('list-group-item');
              li.innerHTML = result.title + " <a href=#" + result._id + ">read</a>"; // Adjust this based on your actual data structure
              searchResults.appendChild(li);
            });
          } else {
            searchResults.innerHTML = '<li class="list-group-item">No results found.</li>';
          }
        } else {
          const errorMessage = await response.text();
          throw new Error(errorMessage);
        }
      } catch (error) {
        console.error('Error:', error.message);
      }
    };

    const highlightKeywordInPage = (keyword) => {
      const regex = new RegExp(`\\b${keyword}\\b`, 'gi');
      const elements = postsList.querySelectorAll('*');

      elements.forEach(element => {
        if (element.nodeType === Node.TEXT_NODE && regex.test(element.nodeValue)) {
          const newText = element.nodeValue.replace(regex, match => `<span class="highlight">${match}</span>`);
          const wrapper = document.createElement('span');
          wrapper.innerHTML = newText;
          element.parentNode.replaceChild(wrapper, element);
        } else if (element.nodeType === Node.ELEMENT_NODE) {
          const childNodes = element.childNodes;
          childNodes.forEach(child => {
            if (child.nodeType === Node.TEXT_NODE && regex.test(child.nodeValue)) {
              const newText = child.nodeValue.replace(regex, match => `<span class="highlight">${match}</span>`);
              const wrapper = document.createElement('span');
              wrapper.innerHTML = newText;
              child.parentNode.replaceChild(wrapper, child);
            }
          });
        }
      });
    };

    searchInput.addEventListener('input', async () => {
      const keyword = searchInput.value.trim();
      if (keyword) {
        await fetchSearchResults(keyword);
        highlightKeywordInPage(keyword);
      } else {
        searchResults.innerHTML = ''; // Clear search results if input is empty
        const highlights = document.querySelectorAll('.highlight');
        highlights.forEach(highlight => highlight.replaceWith(highlight.textContent));
      }
    });
  });
</script>

